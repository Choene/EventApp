@page "/register/{EventId}"
@using EventApp.Data.Services;
@inject EventApp.Data.Services.EventDataService EventDataService
@inject EventApp.Data.Services.RegistrationService RegistrationService
@using EventApp.Core.Models


<h2>Register for Event</h2>

@if (currentEvent == null)
{
    <p>Loading...</p>
}
else if (currentEvent.AvailableSeats <= 0)
{
    <p>Sorry, this event is fully booked.</p>
}
else
{
    <form @onsubmit="RegisterUser">
        <!-- Form fields like name, email etc. -->
        <input type="text" @bind="userName" placeholder="Enter your name" />
        <input type="email" @bind="userEmail" placeholder="Enter your email" />
        <button type="submit">Register</button>
    </form>
    @if (!string.IsNullOrEmpty(uniqueReferenceNumber))
    {
        <p>Successfully registered! Your reference number is @uniqueReferenceNumber</p>
    }
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

@code {
        [Parameter] 
        public string EventId { get; set; }

    private int parsedEventId;
    private EventApp.Core.Models.Event currentEvent;
    private string userName;
    private string userEmail;
    private string uniqueReferenceNumber;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        if (int.TryParse(EventId, out parsedEventId))
        {
            currentEvent = await EventDataService.GetEventByIdAsync(parsedEventId);
        }
        else
        {
            errorMessage = "Please select a valid event to register.";
        }
    }

    private async Task RegisterUser()
    {
        if (int.TryParse(EventId, out parsedEventId))
        {
            var registration = new EventApp.Core.Models.Registration
                {
                    EventId = parsedEventId,
                    UserName = userName,
                    Email = userEmail,
                    // UniqueReferenceNumber will be generated in RegistrationService
                };

            RegistrationResult result = await RegistrationService.RegisterUserAsync(registration);
            if (result.IsSuccessful)
            {
                // Handle successful registration
                string uniqueReferenceNumber = result.UniqueReferenceNumber;
            }
            else
            {
                // Handle unsuccessful registration
                string message = result.Message;
                // Display this message to the user
            }


            // Update event's available seats
            if (currentEvent != null)
            {
                currentEvent.AvailableSeats--;
                await EventDataService.UpdateEventAsync(currentEvent);
            }
        }
        else
        {
            errorMessage = "Unable to process registration.";
        }
    }
}
